name: Build

on:
  push:
    branches:
      - development

  pull_request:
    branches:
      - development

env:
  DOCKERFILE_PATH: Dockerfile
  DOCKER_BUILD_CONTEXT: src
  IMAGE_NAME: ui-chartname
  CHART_NAME: ui-chartname

jobs:
  build:
    name: Build Docker image
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semver.outputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      ## Setting the default tag for Pull request events as they will not have github.ref equal to release nor development
      - name: Setting default tag
        id: semverenvversion-default
        run: echo "${{ github.ref }} - " | echo "semver_version=latest" >> $GITHUB_ENV

      - name: Generate image tag DEV
        id: semverenvversion-dev
        run: echo "${{ github.ref }} - " | echo "semver_version=$(date -u +%Y.%m).${GITHUB_RUN_NUMBER}-dev" >> $GITHUB_ENV

      - name: Set the output variable
        id: semver
        run: echo "::set-output name=version::${{ env.semver_version }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Login to Imagine container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.IM_ACR_REGISTRY }}
          username: ${{ secrets.IM_ACR_USERNAME }}
          password: ${{ secrets.IM_ACR_PASSWORD }}
          logout: true

      - name: Build Docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: ${{ env.DOCKERFILE_PATH }}
          build-args: |
            NPM_TOKEN=${{ env.NPM_TOKEN }}
          push: ${{ github.event_name == 'push' }}
          tags: |
            ${{ secrets.IM_ACR_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.IM_ACR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.semver_version }}


  publish:
    if: github.event_name == 'push'
    name: Publish Helm chart
    runs-on: ubuntu-latest
    needs:
      - build
    outputs:
      version: ${{ needs.build.outputs.version }}
    env:
      # version generated as part of the build
      VERSION: ${{ needs.build.outputs.version }}
      # internal Helm repository name (alias)
      REPO_NAME: im
    steps:
      - uses: actions/checkout@v2

      - name: "Install tool: Helm"
        uses: Azure/setup-helm@v1
        id: helm
        with:
          version: v3.3.3

      - name: Add Helm to $PATH
        run: |
          HELM_PATH=$(dirname '${{ steps.helm.outputs.helm-path }}')
          echo "helm: $HELM_PATH"
          echo $HELM_PATH >> $GITHUB_PATH

      - name: Install yq
        uses: chrisdickinson/setup-yq@latest
        with:
          yq-version: v4.5.0

      - name: Update image version in Helm chart (values.yaml)
        env:
          IMAGE_REPO: ${{ secrets.IM_ACR_REGISTRY }}/${{ env.IMAGE_NAME }}
        run: |
          yq e "(.image.repository = strenv(IMAGE_REPO)) | (.image.tag = strenv(VERSION))" -i chart/${CHART_NAME}/values.yaml
          yq e "(.version, .appVersion) = strenv(VERSION)" -i chart/${CHART_NAME}/Chart.yaml

      - name: Create tag
        uses: actions/github-script@v3
        with:
          github-token: ${{ github.token }}
          script: |
            try {
              await github.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/tags/v' + process.env.VERSION,
                sha: context.sha
              })
            } catch (e) {
              if (e.status === 422) return // tag already exists
              throw e;
            }

      - name: Configure Helm
        env:
          CM_USERNAME: ${{ secrets.CHARTMUSEUM_USERNAME }}
          CM_PASSWORD: ${{ secrets.CHARTMUSEUM_PASSWORD }}
        run: |
          helm version

          echo "Install ChartMuseum plugin"
          helm plugin install https://github.com/chartmuseum/helm-push || echo "Ignore plugin installation failure"
          helm plugin list

          echo "Add stable repo"
          helm repo add stable https://charts.helm.sh/stable --force-update

          echo "Add private ChartMuseum repository"
          helm repo add ${REPO_NAME} https://chartmuseum.k3imagine.com --username "${CM_USERNAME}" --password "${CM_PASSWORD}" --force-update

      - name: Publish Helm chart to ChartMuseum
        run: helm push chart/${CHART_NAME}/ ${REPO_NAME} --dependency-update

  promote:
    if: github.event_name == 'push'
    name: Promote to dev
    runs-on: ubuntu-latest
    needs:
      - publish
    env:
      KUBE_ENV: dev
      VERSION: ${{ needs.publish.outputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: K3Imagine/ImagineApp
          ssh-key: ${{ secrets.GIT_SSH_KEY }}

      - name: Install yq
        uses: chrisdickinson/setup-yq@latest
        with:
          yq-version: v4.5.0

      - name: Update requirements file
        run: |
          git config user.name "GitHub Actions"
          git config user.email github@k3btg.com

          yq e "(.dependencies.[] | select(.name == strenv(CHART_NAME)).version) |= strenv(VERSION)" -i chart/imagine/requirements-${KUBE_ENV}.yaml

          git add chart/imagine/requirements-${KUBE_ENV}.yaml
          git commit -m "${KUBE_ENV}: promote ${CHART_NAME} to v${VERSION}"

          cat chart/imagine/requirements-${KUBE_ENV}.yaml
          git push -u origin
          